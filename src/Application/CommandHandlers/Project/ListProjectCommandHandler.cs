using System.Text;
using Domain.Commands;
using Domain.Commands.Project;
using Domain.Repositories;
using Domain.Constants;

public class ListProjectCommandHandler(
    IProjectRepository projectRepository,
    IUserRepository userRepository
) : ICommandHandler<ListProjectCommand>
{
    /// <summary>
    /// –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
    /// </summary>
    public async Task<string?> Handle(ListProjectCommand command)
    {
        if (command.UserId == null)
            return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.";

        // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
        var user = await userRepository.FindByIdTelegram(command.UserId.Value);
        if (user == null)
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start";

        Console.WriteLine($"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID={user.Id}, Name={user.Name}, TelegramId={user.IdTelegram}");

        // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var projects = await projectRepository.GetUserProjectsAsync(user.Id);

        Console.WriteLine($"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects?.Count() ?? 0}");

        if (projects == null || !projects.Any())
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /add_project";

        var result = new StringBuilder();
        result.AppendLine("üìã –í–ê–®–ò –ü–†–û–ï–ö–¢–´:");
        result.AppendLine(new string('=', 50));
        result.AppendLine();

        foreach (var project in projects)
        {
            result.AppendLine($"üÜî ID: {project.Id}");
            result.AppendLine($"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {project.Name}");
            result.AppendLine($"üìÖ –î–µ–¥–ª–∞–π–Ω: {project.Deadline:dd.MM.yyyy}");
            result.AppendLine();
            result.AppendLine("üí° –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø:");
            result.AppendLine($"   ‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {BotCommands.ProjectInvite} [{project.Id}] [email] [—Ä–æ–ª—å?]");
            result.AppendLine($"   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {BotCommands.TaskCreate} [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–æ–ø–∏—Å–∞–Ω–∏–µ] {project.Id}");
            result.AppendLine($"   ‚Ä¢ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç: {BotCommands.ProjectDelete} [{project.Id}]");
            result.AppendLine();
            result.AppendLine(new string('-', 50));
            result.AppendLine();
        }

        result.AppendLine("üìå –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´:");
        result.AppendLine($"   ‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: {BotCommands.AddProject}");
        result.AppendLine($"   ‚Ä¢ –ú–æ–∏ –∑–∞–¥–∞—á–∏: {BotCommands.ListMyTasks}");
        result.AppendLine($"   ‚Ä¢ –í –Ω–∞—á–∞–ª–æ: {BotCommands.Start}");

        return result.ToString();
    }
}
